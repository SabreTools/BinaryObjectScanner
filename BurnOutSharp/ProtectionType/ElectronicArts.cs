using System.Collections.Generic;
using BurnOutSharp.Matching;

namespace BurnOutSharp.ProtectionType
{
    public class ElectronicArts : IContentCheck
    {
        /// <summary>
        /// Set of all ContentMatchSets for this protection
        /// </summary>
        private static readonly List<ContentMatchSet> contentMatchers = new List<ContentMatchSet>
        {
            // EASTL
            //new ContentMatchSet(new byte?[] { 0x45, 0x41, 0x53, 0x54, 0x4C }, "Cucko (EA Custom)"),

            // R + (char)0x00 + e + (char)0x00 + g + (char)0x00 + i + (char)0x00 + s + (char)0x00 + t + (char)0x00 + r + (char)0x00 + a + (char)0x00 + t + (char)0x00 + i + (char)0x00 + o + (char)0x00 + n + (char)0x00 +   + (char)0x00 + C + (char)0x00 + o + (char)0x00 + d + (char)0x00 + e + (char)0x00 +   + (char)0x00 + i + (char)0x00 + n + (char)0x00 + s + (char)0x00 + t + (char)0x00 + a + (char)0x00 + l + (char)0x00 + l + (char)0x00 + e + (char)0x00 + r + (char)0x00 +   + (char)0x00 + p + (char)0x00 + r + (char)0x00 + o + (char)0x00 + g + (char)0x00 + r + (char)0x00 + a + (char)0x00 + m + (char)0x00
            new ContentMatchSet(new byte?[]
            {
                0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x69, 0x00,
                0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00,
                0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00,
                0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x64, 0x00,
                0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00,
                0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00,
                0x6C, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00,
                0x70, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00,
                0x72, 0x00, 0x61, 0x00, 0x6D, 0x00
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"),

            // R + (char)0x00 + e + (char)0x00 + g + (char)0x00 + i + (char)0x00 + s + (char)0x00 + t + (char)0x00 + r + (char)0x00 + a + (char)0x00 + t + (char)0x00 + i + (char)0x00 + o + (char)0x00 + n + (char)0x00 +   + (char)0x00 + c + (char)0x00 + o + (char)0x00 + d + (char)0x00 + e + (char)0x00 +   + (char)0x00 + i + (char)0x00 + n + (char)0x00 + s + (char)0x00 + t + (char)0x00 + a + (char)0x00 + l + (char)0x00 + l + (char)0x00 + e + (char)0x00 + r + (char)0x00 +   + (char)0x00 + p + (char)0x00 + r + (char)0x00 + o + (char)0x00 + g + (char)0x00 + r + (char)0x00 + a + (char)0x00 + m + (char)0x00
            new ContentMatchSet(new byte?[]
            {
                0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x69, 0x00,
                0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00,
                0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00,
                0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x64, 0x00,
                0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00,
                0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00,
                0x6C, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00,
                0x70, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00,
                0x72, 0x00, 0x61, 0x00, 0x6D, 0x00
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"),

            // A + (char)0x00 + b + (char)0x00 + o + (char)0x00 + u + (char)0x00 + t + (char)0x00 +   + (char)0x00 + C + (char)0x00 + D + (char)0x00 + K + (char)0x00 + e + (char)0x00 + y + (char)0x00
            new ContentMatchSet(new byte?[]
            {
                0x41, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x75, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x43, 0x00, 0x44, 0x00,
                0x4B, 0x00, 0x65, 0x00, 0x79, 0x00
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"),

            // Overmatches with a more generic protection
            /* // I + (char)0x00 + n + (char)0x00 + t + (char)0x00 + e + (char)0x00 + r + (char)0x00 + n + (char)0x00 + a + (char)0x00 + l + (char)0x00 + N + (char)0x00 + a + (char)0x00 + m + (char)0x00 + e + (char)0x00 +  + (char)0x00 +  + (char)0x00 + C + (char)0x00 + D + (char)0x00 + K + (char)0x00 + e + (char)0x00 + y + (char)0x00
            new ContentMatchSet(new byte?[]
            {
                0x49, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00,
                0x72, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x00, 0x00, 0x43, 0x00, 0x44, 0x00, 0x4B, 0x00,
                0x65, 0x00, 0x79, 0x00
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"), */

            // I + (char)0x00 + n + (char)0x00 + t + (char)0x00 + e + (char)0x00 + r + (char)0x00 + n + (char)0x00 + a + (char)0x00 + l + (char)0x00 + N + (char)0x00 + a + (char)0x00 + m + (char)0x00 + e + (char)0x00 +  + (char)0x00 +  + (char)0x00 + C + (char)0x00 + D + (char)0x00 + C + (char)0x00 + o + (char)0x00 + d + (char)0x00 + e + (char)0x00
            new ContentMatchSet(new byte?[]
            {
                0x49, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00,
                0x72, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x00, 0x00, 0x43, 0x00, 0x44, 0x00, 0x43, 0x00,
                0x6F, 0x00, 0x64, 0x00, 0x65, 0x00
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"),

            // EReg Config Form
            new ContentMatchSet(new byte?[]
            {
                0x45, 0x52, 0x65, 0x67, 0x20, 0x43, 0x6F, 0x6E,
                0x66, 0x69, 0x67, 0x20, 0x46, 0x6F, 0x72, 0x6D
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"),

            // ereg.ea-europe.com
            new ContentMatchSet(new byte?[]
            {
                0x65, 0x72, 0x65, 0x67, 0x2E, 0x65, 0x61, 0x2D,
                0x65, 0x75, 0x72, 0x6F, 0x70, 0x65, 0x2E, 0x63,
                0x6F, 0x6D
            }, Utilities.GetFileVersion, "EA CdKey Registration Module"),

            // GenericEA + (char)0x00 + (char)0x00 + (char)0x00 + Activation
            new ContentMatchSet(new byte?[]
            {
                0x47, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x45,
                0x41, 0x00, 0x00, 0x00, 0x41, 0x63, 0x74, 0x69,
                0x76, 0x61, 0x74, 0x69, 0x6F, 0x6E
            }, "EA DRM Protection"),

            // E + (char)0x00 + A + (char)0x00 +   + (char)0x00 + D + (char)0x00 + R + (char)0x00 + M + (char)0x00 +   + (char)0x00 + H + (char)0x00 + e + (char)0x00 + l + (char)0x00 + p + (char)0x00 + e + (char)0x00 + r + (char)0x00
            new ContentMatchSet(new byte?[]
            {
                0x45, 0x00, 0x41, 0x00, 0x20, 0x00, 0x44, 0x00,
                0x52, 0x00, 0x4D, 0x00, 0x20, 0x00, 0x48, 0x00,
                0x65, 0x00, 0x6C, 0x00, 0x70, 0x00, 0x65, 0x00,
                0x72, 0x00
            }, "EA DRM Protection"),
        };

        // TODO: Verify this doesn't over-match
        // TODO: Do more research into the Cucko protection:
        //      - Reference to `EASTL` and `EAStdC` are standard for EA products and does not indicate Cucko by itself
        //      - There's little information outside of PiD detection that actually knows about Cucko
        /// <inheritdoc/>
        public string CheckContents(string file, byte[] fileContent, bool includePosition = false)
        {
            return MatchUtil.GetFirstMatch(file, fileContent, contentMatchers, includePosition);
        }
    }
}
